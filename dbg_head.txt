"use client";

import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { LineChart, Line, BarChart, Bar, CartesianGrid, XAxis, YAxis } from "recharts";
import type { DashboardData } from "./actions";
import { fetchDashboardData } from "./actions";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { narrativeClusterData, trendDetectionData } from "@/lib/data";
import { searchNews, generateNewsReportAction } from "@/app/(dashboard)/noticias/actions";
import { planToPdfBytes } from "@/lib/plan-pdf";
import { generateRecommendationPlanAction } from "@/app/(dashboard)/recommendations/actions";

export default function DashboardPage() {
  const [data, setData] = React.useState<DashboardData | null>(null);
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    (async () => {
      try {
        const res = await fetchDashboardData();
        setData(res);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // Cores em escala 0..1
  const color01 = (v: number) => (v >= 0.75 ? 'text-green-600' : v >= 0.5 ? 'text-yellow-600' : 'text-red-600');
  const sentimentColor = (score: number) => color01(score);
  const confidenceColor = (v: number) => color01(v);
  const ratioColor = (v: number) => color01(v);
  const positivePctColor = (pct: number) => (pct >= 66 ? 'text-green-600' : pct <= 44 ? 'text-red-600' : 'text-yellow-600');

  const avg = (arr: number[]) => (arr.length ? (arr.reduce((a, b) => a + b, 0) / arr.length) : 0);
  const iapAvgVal = data ? avg(data.indicators.map((i) => i.iap)) : 0;
  const ibsAvgVal = data ? avg(data.indicators.map((i) => i.ibs)) : 0;
  const iapAvg = iapAvgVal.toFixed(3);
  const ibsAvg = ibsAvgVal.toFixed(3);

  // Added: Clusters/Menções (Temas) + Tendência/Relatórios (Notícias) + Implementar
  type Trend = { date: string; news_count: number; avg_sentiment: number; positive_count: number; negative_count: number };
  type ExtendedNews = { publishedAt: string; title: string; summary?: string; sentiment_score: number } & { sentimentValue?: number } & any;
  const [allNews, setAllNews] = React.useState<ExtendedNews[]>([]);
  const [trends, setTrends] = React.useState<Trend[]>([]);

  const mapRaw = React.useCallback((raw?: number) => (raw === 1 ? -1 : raw === 3 ? 1 : 0), []);
  const loadNews = React.useCallback(async () => {
    try {
      const items = await searchNews();
      const extended = items.map((n: any) => ({ ...n, sentiment_score: mapRaw((n as any).sentimentValue) }));
      setAllNews(extended);
    } catch { setAllNews([]); }
  }, [mapRaw]);
  React.useEffect(() => { loadNews(); }, [loadNews]);
  React.useEffect(() => {
    const map = new Map<string, { sum: number; count: number; pos: number; neg: number }>();
    for (const n of allNews) {
      const d = new Date(n.publishedAt);
      if (isNaN(d.getTime())) continue;
      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}-${String(d.getDate()).padStart(2, "0")}`;
      const cur = map.get(key) || { sum: 0, count: 0, pos: 0, neg: 0 };
      cur.sum += n.sentiment_score || 0; cur.count += 1; if ((n.sentiment_score || 0) > 0) cur.pos += 1; else if ((n.sentiment_score || 0) < 0) cur.neg += 1;
      map.set(key, cur);
    }
    const arr: Trend[] = Array.from(map.entries()).sort((a,b)=> a[0] < b[0] ? -1: 1).map(([date, v]) => ({ date, news_count: v.count, avg_sentiment: v.count ? parseFloat((v.sum / v.count).toFixed(2)) : 0, positive_count: v.pos, negative_count: v.neg }));
    setTrends(arr);
  }, [allNews]);

  const [reportType, setReportType] = React.useState<'daily'|'weekly'|'custom'>('daily');
  const [reportLoading, setReportLoading] = React.useState(false);
  const [customForm, setCustomForm] = React.useState({ query: '', days: 7 });
  const [reportData, setReportData] = React.useState<null | { title: string; timeframeLabel: string; summary: string; keyMetrics: { total: number; avgSentiment: number; positivePct: number; topThemes: string[] }; highlights: string[]; risks: string[]; recommendations: string[] }>(null);
  const handleGenerateReport = React.useCallback(async ()=>{
    try { setReportLoading(true); const res = await generateNewsReportAction({ type: reportType, query: customForm.query, days: customForm.days }); setReportData(res as any); }
    finally { setReportLoading(false); }
  }, [reportType, customForm]);

  const [generatingPlan, setGeneratingPlan] = React.useState(false);
  const handleImplement = React.useCallback(async () => {
    try {
      setGeneratingPl

