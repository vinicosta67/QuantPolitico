// app/eleicao2/page.tsx
'use client';

import * as React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Loader2, ArrowUp, ArrowDown } from 'lucide-react';
import { fetchElectionData, runScenario } from './actions';
import { GaugeChart, KpiCard, RadarChartComponent, ApprovalHistoryComparison } from './charts';
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from '@/components/ui/chart';
import { CartesianGrid, XAxis, YAxis, ComposedChart, Bar, Line } from 'recharts';

type ElectionData = Awaited<ReturnType<typeof fetchElectionData>>;

export default function Eleicao2Page() {
  const [data, setData] = React.useState<ElectionData>(null);
  const [isLoading, setIsLoading] = React.useState(true);
  const [cargo, setCargo] = React.useState<'governador' | 'senador' | 'presidente'>('governador');
  const [estado, setEstado] = React.useState<'sp' | 'rj' | 'mg' | 'ba'>('sp');
  const [partido, setPartido] = React.useState<'partido_a' | 'partido_b' | 'partido_c'>('partido_a');
  const [fontes, setFontes] = React.useState({ midia: true, redes: true, legislativo: false });

  // Novo: filtros da seção Temas
  const [tema, setTema] = React.useState<'economia' | 'saude' | 'educacao' | 'seguranca' | 'meio_ambiente' | 'infraestrutura'>('economia');
  const [periodo, setPeriodo] = React.useState<7 | 30 | 90>(30);
  const [fonte, setFonte] = React.useState<'broadcast' | 'newsdata' | 'jornais' | 'redes'>('newsdata');

  const [hypothesis, setHypothesis] = React.useState('');
  const [simLoading, setSimLoading] = React.useState(false);
  const [simResult, setSimResult] = React.useState<null | {
    impactAnalysis: string;
    kpiChanges: { label: string; change: string; changeType: 'increase' | 'decrease'; description: string }[];
  }>(null);

  const handleFetchData = React.useCallback(async () => {
    setIsLoading(true);
    const result = await fetchElectionData({ cargo, estado, partido, fontes });
    setData(result);
    setIsLoading(false);
  }, [cargo, estado, partido, fontes]);

  React.useEffect(() => {
    handleFetchData();
  }, [handleFetchData]);

  const getHeatmapColor = (value: number) => {
    if (value > 4) return 'bg-red-500';
    if (value > 3) return 'bg-orange-400';
    if (value > 2) return 'bg-yellow-300';
    return 'bg-green-400';
  };

  const handleSimulate = React.useCallback(async () => {
    setSimLoading(true);
    const res = await runScenario({ hypothesis });
    setSimResult(res as any);
    setSimLoading(false);
  }, [hypothesis]);

  // ----------------- MOCK: Dados para gráficos de Temas -----------------
  // Gerador pseudo-aleatório simples e determinístico por seed
  const seeded = React.useCallback((s: string) => {
    let h = 1779033703 ^ s.length;
    for (let i = 0; i < s.length; i++) {
      h = Math.imul(h ^ s.charCodeAt(i), 3432918353);
      h = (h << 13) | (h >>> 19);
    }
    return () => {
      h = Math.imul(h ^ (h >>> 16), 2246822507);
      h = Math.imul(h ^ (h >>> 13), 3266489909);
      h ^= h >>> 16;
      // 0..1
      return (h >>> 0) / 4294967296;
    };
  }, []);

  const lastNDays = React.useCallback((n: number) => {
    const days: { key: string; label: string; date: Date }[] = [];
    const d = new Date();
    for (let i = n - 1; i >= 0; i--) {
      const di = new Date(d);
      di.setDate(d.getDate() - i);
      const label = di.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
      days.push({ key: `${di.getFullYear()}-${di.getMonth() + 1}-${di.getDate()}`, label, date: di });
    }
    return days;
  }, []);

  // Polaridade x Volume (30 dias por padrão)
  const polVolData = React.useMemo(() => {
    const rnd = seeded(`${tema}|${fonte}|${periodo}|polvol`);
    return lastNDays(periodo).map((d, i) => {
      const base = 40 + Math.round(rnd() * 120);
      const wave = Math.sin((i / (periodo - 1)) * Math.PI * 2) * (10 + rnd() * 20);
      const volume = Math.max(5, Math.round(base + wave));
      const polarity = parseFloat(((rnd() - 0.5) * 1.6).toFixed(2)); // -0.8 .. 0.8
      return { date: d.label, volume, polarity };
    });
  }, [tema, fonte, periodo, lastNDays, seeded]);

  // Emoções x Tempo (+ polaridade) com 6 emoções
  const emotionData = React.useMemo(() => {
    const rnd = seeded(`${tema}|${fonte}|${periodo}|emotion`);
    const emotions = ['alegria', 'tristeza', 'raiva', 'medo', 'surpresa', 'nojo'] as const;
    return lastNDays(periodo).map((d, i) => {
      const row: any = { date: d.label };
      emotions.forEach((e, idx) => {
        const base = 0.25 + (idx * 0.07);
        const wave = Math.sin((i / (periodo - 1)) * Math.PI * (1 + idx * 0.2)) * 0.15;
        const noise = (rnd() - 0.5) * 0.1;
        const v = Math.max(0, Math.min(1, base + wave + noise));
        row[e] = parseFloat(v.toFixed(2));
      });
      row.polarity = parseFloat(((rnd() - 0.5) * 1.8).toFixed(2));
      return row;
    });
  }, [tema, fonte, periodo, lastNDays, seeded]);

  const polVolConfig = React.useMemo(() => ({
    volume: { label: 'Volume', color: 'hsl(var(--primary))' },
    polarity: { label: 'Polaridade média', color: '#f59e0b' },
  }), []);

  const emotionConfig = React.useMemo(() => ({
    alegria: { label: 'Alegria', color: 'hsl(var(--chart-2))' },
    tristeza: { label: 'Tristeza', color: '#6b7280' },
    raiva: { label: 'Raiva', color: 'hsl(var(--destructive))' },
    medo: { label: 'Medo', color: '#6366f1' },
    surpresa: { label: 'Surpresa', color: 'hsl(var(--chart-4))' },
    nojo: { label: 'Nojo', color: '#84cc16' },
    polarity: { label: 'Polaridade', color: '#f59e0b' },
  }), []);

  return (
    <div className="container mx-auto space-y-6 p-4 sm:p-6 lg:p-8">
      {/* Nova seção: Temas - filtros e gráficos (mock) */}
      <Card>
        <CardHeader>
          <CardTitle>Temas</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Filtros (apenas Tema, Período, Fonte) */}
          <div className="flex flex-wrap items-end gap-x-6 gap-y-4">
            <div className="space-y-1.5">
              <Label htmlFor="tema">Tema</Label>
              <Select value={tema} onValueChange={(v) => setTema(v as any)}>
                <SelectTrigger id="tema" className="w-56">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="economia">Economia</SelectItem>
                  <SelectItem value="saude">Saúde</SelectItem>
                  <SelectItem value="educacao">Educação</SelectItem>
                  <SelectItem value="seguranca">Segurança</SelectItem>
                  <SelectItem value="meio_ambiente">Meio Ambiente</SelectItem>
                  <SelectItem value="infraestrutura">Infraestrutura</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1.5">
              <Label htmlFor="periodo">Período</Label>
              <Select value={String(periodo)} onValueChange={(v) => setPeriodo(parseInt(v, 10) as any)}>
                <SelectTrigger id="periodo" className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7">7 dias</SelectItem>
                  <SelectItem value="30">30 dias</SelectItem>
                  <SelectItem value="90">90 dias</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-1.5">
              <Label htmlFor="fonte">Fonte</Label>
              <Select value={fonte} onValueChange={(v) => setFonte(v as any)}>
                <SelectTrigger id="fonte" className="w-56">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="broadcast">Broadcast</SelectItem>
                  <SelectItem value="newsdata">Newsdata</SelectItem>
                  <SelectItem value="jornais">Jornais</SelectItem>
                  <SelectItem value="redes">Redes Sociais</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Gráfico 1: Polaridade x Volume (30 dias default) */}
          <Card>
            <CardHeader>
              <CardTitle>Polaridade × Volume (últimos {periodo} dias)</CardTitle>
            </CardHeader>
            <CardContent>
              <ChartContainer config={{ volume: { label: 'Volume', color: 'hsl(var(--primary))' }, polarity: { label: 'Polaridade média', color: '#f59e0b' } }} className="h-[300px] w-full">
                <ComposedChart data={polVolData} margin={{ left: 8, right: 12, top: 8 }}>
                  <CartesianGrid strokeDasharray="3 3" vertical={false} />
                  <XAxis dataKey="date" tickLine={false} axisLine={false} />
                  <YAxis yAxisId="left" tickLine={false} axisLine={false} width={32} />
                  <YAxis yAxisId="right" orientation="right" domain={[-1, 1]} tickLine={false} axisLine={false} width={32} />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Bar yAxisId="left" dataKey="volume" fill={`var(--color-volume)`} radius={4} />
                  <Line yAxisId="right" type="monotone" dataKey="polarity" stroke={`var(--color-polarity)`} dot={false} strokeWidth={2.25} />
                  <ChartLegend verticalAlign="top" content={<ChartLegendContent />} />
                </ComposedChart>
              </ChartContainer>
            </CardContent>
          </Card>

          {/* Gráfico 2: Emoções × Tempo + Polaridade */}
          <Card>
            <CardHeader>
              <CardTitle>Polaridade × Emoções (últimos {periodo} dias)</CardTitle>
            </CardHeader>
            <CardContent>
              <ChartContainer
                config={{
                  alegria: { label: 'Alegria', color: 'hsl(var(--chart-2))' },
                  tristeza: { label: 'Tristeza', color: '#6b7280' },
                  raiva: { label: 'Raiva', color: 'hsl(var(--destructive))' },
                  medo: { label: 'Medo', color: '#6366f1' },
                  surpresa: { label: 'Surpresa', color: 'hsl(var(--chart-4))' },
                  nojo: { label: 'Nojo', color: '#84cc16' },
                  polarity: { label: 'Polaridade', color: '#f59e0b' },
                }}
                className="h-[320px] w-full"
              >
                <ComposedChart data={emotionData} margin={{ left: 8, right: 12, top: 8 }}>
                  <CartesianGrid strokeDasharray="3 3" vertical={false} />
                  <XAxis dataKey="date" tickLine={false} axisLine={false} />
                  <YAxis yAxisId="left" domain={[0, 1]} tickLine={false} axisLine={false} width={28} />
                  <YAxis yAxisId="right" orientation="right" domain={[-1, 1]} tickLine={false} axisLine={false} width={32} />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Line yAxisId="left" type="monotone" dataKey="alegria" stroke={`var(--color-alegria)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="left" type="monotone" dataKey="tristeza" stroke={`var(--color-tristeza)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="left" type="monotone" dataKey="raiva" stroke={`var(--color-raiva)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="left" type="monotone" dataKey="medo" stroke={`var(--color-medo)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="left" type="monotone" dataKey="surpresa" stroke={`var(--color-surpresa)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="left" type="monotone" dataKey="nojo" stroke={`var(--color-nojo)`} dot={false} strokeWidth={2} />
                  <Line yAxisId="right" type="monotone" dataKey="polarity" stroke={`var(--color-polarity)`} dot={false} strokeWidth={2.25} strokeDasharray="5 4" />
                  <ChartLegend verticalAlign="top" content={<ChartLegendContent />} />
                </ComposedChart>
              </ChartContainer>
            </CardContent>
          </Card>
        </CardContent>
      </Card>
      <h1 className="text-4xl font-bold tracking-tighter">ELEIÇÃO</h1>

      {/* Filtros */}
      <Card>
        <CardContent className="flex flex-wrap items-end gap-x-6 gap-y-4 p-4">
          <div className="space-y-1.5">
            <Label htmlFor="cargo">Cargo</Label>
            <Select value={cargo} onValueChange={(v) => setCargo(v as any)}>
              <SelectTrigger id="cargo" className="w-44">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="governador">Governador</SelectItem>
                <SelectItem value="senador">Senador</SelectItem>
                <SelectItem value="presidente">Presidente</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-1.5">
            <Label htmlFor="estado">Estado</Label>
            <Select value={estado} onValueChange={(v) => setEstado(v as any)}>
              <SelectTrigger id="estado" className="w-44">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="sp">São Paulo</SelectItem>
                <SelectItem value="rj">Rio de Janeiro</SelectItem>
                <SelectItem value="mg">Minas Gerais</SelectItem>
                <SelectItem value="ba">Bahia</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-1.5">
            <Label htmlFor="partido">Partido</Label>
            <Select value={partido} onValueChange={(v) => setPartido(v as any)}>
              <SelectTrigger id="partido" className="w-44">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="partido_a">Partido A</SelectItem>
                <SelectItem value="partido_b">Partido B</SelectItem>
                <SelectItem value="partido_c">Partido C</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="flex-grow" />
          <div className="flex items-center gap-4 pb-1">
            <span className="text-sm font-medium">Fontes:</span>
            <div className="flex items-center space-x-2">
              <Checkbox id="midia" checked={fontes.midia} onCheckedChange={(v)=> setFontes((f)=>({ ...f, midia: Boolean(v) }))} />
              <Label htmlFor="midia" className="font-normal">
                Mídia
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="redes" checked={fontes.redes} onCheckedChange={(v)=> setFontes((f)=>({ ...f, redes: Boolean(v) }))} />
              <Label htmlFor="redes" className="font-normal">
                Redes
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="legislativo" checked={fontes.legislativo} onCheckedChange={(v)=> setFontes((f)=>({ ...f, legislativo: Boolean(v) }))} />
              <Label htmlFor="legislativo" className="font-normal">
                Legislativo
              </Label>
            </div>
          </div>
        </CardContent>
      </Card>

      {isLoading ? (
        <div className="flex h-96 items-center justify-center">
          <Loader2 className="h-12 w-12 animate-spin text-primary" />
        </div>
      ) : (
        data && (
          <>
            {/* Comparação de aprovação (linha) */}
            <ApprovalHistoryComparison cargo={cargo} estado={estado} />

            {/* KPIs e Gauge */}
            <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
              <KpiCard title="IAp" subtitle="(Aprovação - Político/UF)" value={data.kpis.iap} />
              <KpiCard title="IApP" subtitle="(Aprovação - Partido/UF Cargo)" value={data.kpis.iapP} />
              <GaugeChart value={data.kpis.its} change={0.64} />
            </div>

            {/* Gráficos Principais */}
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-5">
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle>Mapa de Temas Explicativos</CardTitle>
                </CardHeader>
                <CardContent>
                  <RadarChartComponent data={data.mapaTemas} />
                </CardContent>
              </Card>
              <Card className="lg:col-span-3">
                <CardHeader>
                  <CardTitle>Redes Sociais</CardTitle>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-1/4">Tema</TableHead>
                        <TableHead className="text-center">Twitter</TableHead>
                        <TableHead className="text-center">Facebook</TableHead>
                        <TableHead className="text-center">Instagram</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {data.redesSociais.map((item) => (
                        <TableRow key={item.tema}>
                          <TableCell className="font-medium">{item.tema}</TableCell>
                          <TableCell>
                            <div className={`h-6 w-full ${getHeatmapColor(item.twitter)} rounded-sm`} />
                          </TableCell>
                          <TableCell>
                            <div className={`h-6 w-full ${getHeatmapColor(item.facebook)} rounded-sm`} />
                          </TableCell>
                          <TableCell>
                            <div className={`h-6 w-full ${getHeatmapColor(item.instagram)} rounded-sm`} />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            </div>

            {/* Stakeholders */}
            <Card>
              <CardHeader>
                <CardTitle>Stakeholders‑Chave</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Nome</TableHead>
                      <TableHead>Cargo</TableHead>
                      <TableHead>Papel</TableHead>
                      <TableHead>Impacto</TableHead>
                      <TableHead>Próximo Evento</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {data.stakeholders.map((s) => (
                      <TableRow key={s.nome}>
                        <TableCell className="font-medium">{s.nome}</TableCell>
                        <TableCell>{s.cargo}</TableCell>
                        <TableCell>{s.papel}</TableCell>
                        <TableCell className={`flex items-center font-semibold ${s.impacto > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {s.impacto > 0 ? (
                            <ArrowUp className="mr-1.5 h-4 w-4" />
                          ) : (
                            <ArrowDown className="mr-1.5 h-4 w-4" />
                          )}
                          {Math.abs(s.impacto).toFixed(2).replace('.', ',')}
                        </TableCell>
                        <TableCell>{s.proximoEvento}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            {/* Simulação */}
            <Card>
              <CardContent className="p-4">
                <Textarea
                  placeholder="Escreva sua hipótese..."
                  className="bg-slate-50"
                  value={hypothesis}
                  onChange={(e) => setHypothesis(e.target.value)}
                />
                <div className="mt-3 flex items-center justify-between">
                  <div className="text-sm space-y-1">
                    <p className="cursor-pointer text-muted-foreground hover:underline">→ Observe sua variação</p>
                    <p className="cursor-pointer text-muted-foreground hover:underline">→ Chances em aprovações‑chave</p>
                    <p className="cursor-pointer text-muted-foreground hover:underline">→ Temas (rejeição e tese do Partido)</p>
                    <p className="cursor-pointer text-muted-foreground hover:underline">→ Riscos reativos</p>
                  </div>
                  <Button size="lg" onClick={handleSimulate} disabled={simLoading}>
                    {simLoading ? 'Simulando...' : 'Simular'}
                  </Button>
                </div>

                {simResult && (
                  <div className="mt-6 grid gap-4 md:grid-cols-2">
                    <Card>
                      <CardHeader>
                        <CardTitle>Resultado do simulador</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          {simResult.kpiChanges?.length ? (
                            <ul className="text-sm">
                              {simResult.kpiChanges.map((k, i) => (
                                <li key={i} className="mb-2">
                                  <span className="font-semibold">{k.label}:</span> {k.change} — {k.description}
                                </li>
                              ))}
                            </ul>
                          ) : (
                            <p className="text-sm text-muted-foreground">Sem alterações de KPI.</p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                    <Card>
                      <CardHeader>
                        <CardTitle>Análise</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="whitespace-pre-wrap text-sm text-muted-foreground">{simResult.impactAnalysis}</p>
                      </CardContent>
                    </Card>
                  </div>
                )}
              </CardContent>
            </Card>
          </>
        )
      )}
    </div>
  );
}

