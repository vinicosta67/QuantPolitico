import { PDFDocument, StandardFonts, rgb } from 'pdf-lib'
import type { GenerateNewsReportOutput } from '@/ai/flows/generate-news-report'

const PAGE = { width: 595, height: 842, margin: 48 } as const
const GAP = { line: 14, block: 20, section: 26 } as const

function sanitizeWinAnsi(text: string): string {
  if (!text) return ''
  let out = text
    .replace(/[\u2010-\u2015]/g, '-')
    .replace(/[\u2018\u2019\u201B]/g, "'")
    .replace(/[\u201C\u201D\u201E\u201F]/g, '"')
    .replace(/[\u2022\u2023\u25E6]/g, '*')
    .replace(/\u2026/g, '...')
    .replace(/[\u00A0\u2007\u202F]/g, ' ')
    .replace(/[\u2000-\u206F]/g, ' ')
    .replace(/[^\u0000-\u00FF]/g, '')
  return out
}

function wrapByWidth(font: any, text: string, size: number, maxWidth: number): string[] {
  const clean = sanitizeWinAnsi(text)
  const words = clean.split(/\s+/)
  const lines: string[] = []
  let cur = ''
  for (const w of words) {
    const trial = cur ? cur + ' ' + w : w
    const width = font.widthOfTextAtSize(sanitizeWinAnsi(trial), size)
    if (width > maxWidth && cur) { lines.push(cur); cur = w } else { cur = trial }
  }
  if (cur) lines.push(cur)
  return lines
}

export async function newsReportToPdfBytes(report: GenerateNewsReportOutput): Promise<Uint8Array> {
  const doc = await PDFDocument.create()
  const page = doc.addPage([PAGE.width, PAGE.height])
  const fontRegular = await doc.embedFont(StandardFonts.Helvetica)
  const fontBold = await doc.embedFont(StandardFonts.HelveticaBold)

  const { width, height, margin } = PAGE
  const maxW = width - margin * 2
  let y = height - margin

  // Header with brand bar (teal/gold)
  page.drawRectangle({ x: 0, y: height - 36, width, height: 36, color: rgb(0,0.5,0.5) })
  page.drawRectangle({ x: 0, y: height - 38, width, height: 2, color: rgb(0.96, 0.62, 0.04) })
  page.drawText('Quant Politico', { x: margin, y: height - 26, size: 11, font: fontBold, color: rgb(1,1,1) })
  page.drawText(sanitizeWinAnsi('Relatorio de Noticias'), { x: margin, y, size: 18, font: fontBold })
  y -= GAP.line
  page.drawText(sanitizeWinAnsi(report.timeframeLabel || ''), { x: margin, y, size: 10, font: fontRegular, color: rgb(0.35,0.35,0.35) })
  y -= GAP.section

  // Title
  const titleLines = wrapByWidth(fontBold, report.title || 'Relatorio', 16, maxW)
  for (const l of titleLines) { page.drawText(sanitizeWinAnsi(l), { x: margin, y, size: 16, font: fontBold }); y -= GAP.line }
  y -= 6

  // Summary
  const sumLines = wrapByWidth(fontRegular, report.summary || '', 11, maxW)
  for (const l of sumLines) { if (y < margin + 80) { y = addPage(doc, fontRegular, fontBold) } page.drawText(l, { x: margin, y, size: 11, font: fontRegular }); y -= 12 }
  y -= GAP.block

  // Metrics
  page.drawText(sanitizeWinAnsi('Metricas-chave'), { x: margin, y, size: 12, font: fontBold, color: rgb(0,0.5,0.5) }); y -= GAP.line
  const m = report.keyMetrics
  const metrics = [
    `Total de notícias: ${m.total}`,
    `Polaridade média: ${m.avgSentiment.toFixed(2)}`,
    `% Positivas: ${m.positivePct.toFixed(1)}%`,
    `Top temas: ${(m.topThemes || []).join(', ') || '-'}`,
  ]
  for (const l of metrics) { if (y < margin + 60) { y = addPage(doc, fontRegular, fontBold) } page.drawText(sanitizeWinAnsi(l), { x: margin, y, size: 11, font: fontRegular }); y -= 12 }
  y -= GAP.block

  y = sectionList(doc, page, 'Destaques', report.highlights || [], y, fontRegular, fontBold)
  y = sectionList(doc, page, 'Riscos', report.risks || [], y, fontRegular, fontBold)
  y = sectionList(doc, page, 'Ações recomendadas', report.recommendations || [], y, fontRegular, fontBold)

  return await doc.save()
}

function addPage(doc: PDFDocument, fontRegular: any, fontBold: any): number {
  const p = doc.addPage([PAGE.width, PAGE.height])
  // subtle top rule
  p.drawRectangle({ x: 0, y: PAGE.height - 2, width: PAGE.width, height: 2, color: rgb(0.9,0.9,0.9) })
  return PAGE.height - PAGE.margin
}

function sectionList(doc: PDFDocument, page: any, title: string, items: string[], yStart: number, fontRegular: any, fontBold: any) {
  const { width, margin } = PAGE
  const maxW = width - margin * 2
  let y = yStart
  page.drawText(sanitizeWinAnsi(title), { x: margin, y, size: 12, font: fontBold, color: rgb(0,0.5,0.5) }); y -= GAP.line
  for (const it of items) {
    const lines = wrapByWidth(fontRegular, `• ${it}`, 11, maxW)
    for (const l of lines) {
      if (y < margin + 40) { y = addPage(doc, fontRegular, fontBold) }
      page.drawText(sanitizeWinAnsi(l), { x: margin, y, size: 11, font: fontRegular }); y -= 12
    }
    y -= 2
  }
  return y - GAP.block
}



